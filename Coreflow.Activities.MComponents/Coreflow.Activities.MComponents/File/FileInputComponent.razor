@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@using System.Net.Http.Json

@inject IFileUploadService FileUploader

@if (MaxAllowedFiles > 1)
{
	<InputFile OnChange="@LoadFiles" multiple />
}
else
{
	<div class="c-file-input">

		@if (mShowUploadFile || Document == null)
		{
			<InputFile OnChange="@LoadFiles" />
			@if(mProgress > -1)
			{
				<div class="m-file-input-progress-container">
				  <div class="m-file-input-progress-bar" style="width:@(Math.Round(mProgress))%"></div>
				</div>

			}

			@if (Document != null)
			{
			 <button type="button" class="m-wizard-btn m-btn m-btn-primary m-btn-sm" @onclick="OnBtnUploadNewFile">X</button>
			}
		}
		else
		{
		 <span>@Document?.FileName</span>
		 <button type="button" class="m-wizard-btn m-btn m-btn-primary m-btn-sm" @onclick="OnBtnUploadNewFile">Upload new file</button>
		}

	</div>
}

@code {

	protected bool isLoading;

	[Parameter]
	public int MaxAllowedFiles { get; set; } = 1;

	[Parameter]
	public string FileInputName { get; set; }

	[Parameter]
	public IDictionary<string, string> AdditionalHeaders { get; set; }

	[Parameter]
	public IDocument Document { get; set; }

	[Parameter]
	public EventCallback<IDocument> DocumentChanged { get; set; }

	[Parameter]
	public Expression<Func<IDocument>> DocumentExpression { get; set; }

	protected bool mShowUploadFile = false;
	protected float mProgress = -1;

	protected async void LoadFiles(InputFileChangeEventArgs e)
	{
		if (e.FileCount <= 0) //should we set the Document to null?
			return;

		if (AdditionalHeaders == null)
			AdditionalHeaders = new Dictionary<string, string>();

		if (!AdditionalHeaders.ContainsKey(nameof(FileInputName)))
			AdditionalHeaders.Add(nameof(FileInputName), FileInputName);

		var newDocs = await FileUploader.UploadFiles(e.GetMultipleFiles(MaxAllowedFiles), AdditionalHeaders, OnProgressChanged);

		Document = newDocs.FirstOrDefault();
		await DocumentChanged.InvokeAsync(Document);

		mShowUploadFile = false;
	}

	protected void OnProgressChanged(IBrowserFile pFile, float pProgress)
	{
		mProgress = pProgress;
		StateHasChanged();
	}

	protected void OnBtnUploadNewFile()
	{
		mShowUploadFile = !mShowUploadFile;
	}

}

